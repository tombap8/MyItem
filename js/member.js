// My Item 회원가입 페이지 JS //


$(function () { /// jQB //////////////////////
    /*
    [ 입력폼의 유효성검사 ]
    1. 원리: 입력창에 클릭 또는 탭하여 입력 가능상태일때 포커스상태임
        이때 다른곳을 클릭하면 포커스가 나간 상태임. 이것을 불러상태
        -> 이벤트명 : blur
        (반대 이벤트는 focus)
        불러이벤트를 이용하여 유효성 검사를 진행한다
    2. 이벤트 대상선정: 
    input[type=text][id!=email2], input[type=password]
    - 검사할 대상에서 이메일 뒷주소는 제외해야함
    - != 같지않음, [][] 두가지 속성 모두인것 : 제이쿼리전용
    */

    // blur() 메서드는 불러이벤트가 발생할때 실행됨

    $("input[type=text][id!=email2], input[type=password]")
        .blur(function () {

            // 불러가 발생한 요소의 아이디
            var cid = $(this).attr("id");
            // 불러가 발생한 요소의 값
            var cv;
            // 이름일 경우(cid==="mnm")는 앞뒤공백제거(trim)
            // 그밖의 경우는 모든공백제거(groSpace함수)
            if (cid === "mnm")
                cv = $(this).val().trim();
            else
                cv = groSpace($(this).val());
            // val() 메서드는 입력한 값을 가져옴
            // trim() 메서드는 문자의 앞뒤공백제거함!

            // 공백제거에 대한 검증
            // -> 앞뒤공백만 제거: 이름 같은 경우 중간 공백은 필요~(trim처리)
            // -> 모든 공백 제거: 아이디, 이메일, 비밀번호 등 (공백제거함수)

            // 공백제거후 입력창에 반영하기!
            $(this).val(cv);

            // 불러이벤트 발생확인
            console.log("왜불러?" + cid + "/" + cv);

            ///////////////////////////////////////////////////
            /// 1. 빈값일 경우 "필수입력" 메시지 띄우기~! //////////
            if (cv === "") {
                $(this).siblings(".msg").text("필수입력");
            } ///// if /////////////////////////////////
            
            /// 2. 아이디 유효성 검사하기 ////////////////////////
            else if(cid === "mid"){
                // 아이디 검사 함수 호출하기
                //아이디는 6~10자 영문자 또는 숫자
                //console.log("아이디검사:"+validReg(cv,cid));
                
                // 통과(true)일 경우
                if(validReg(cv,cid)){
                    $(this).siblings(".msg")
                    .html('<b style="color:green">훌륭한 아이디네요~!</b>')
                } ////// if ///////////////
                // 불통과(false)일 경우
                else{
                    $(this).siblings(".msg")
                    .text("아이디는 6~10자 영문자 또는 숫자");
                } ///// else ///////////////
                
            } //////// else if ////////////////////////////////
        
            // 3. 비밀번호 검사하기 /////////////////////////////
            else if(cid === "mpw"){
                
                // 비밀번호 검사함수 호출하기
                //특수문자,문자,숫자 포함 형태의 5~15자리 이내의 암호 정규식
                //console.log("비번검사:"+validReg(cv,cid));
                
                // 불통과(false)일 경우
                if(!validReg(cv,cid)){
                    $(this).siblings(".msg")
                    .text("특수문자,문자,숫자 포함 형태의 5~15자리");
                } ////// if ///////////////
                // 통과(true)일 경우
                else{
                    $(this).siblings(".msg").empty();
                } ///// else ///////////////
                
            } //////// else if ///////////////////////////////
        
            // 4. 비밀번호확인 검사하기 //////////////////////
            else if(cid === "mpw2"){
                
                // 비밀번호입력값과 비밀번호확인 입력값의 동일여부확인
                // 같지 않으면 메시지 띄우기
                if(cv !== $("#mpw").val()){
                    $(this).siblings(".msg")
                    .text("비밀번호가 일치하지 않습니다");
                } ////// if ///////////////
                // 통과(true)일 경우
                else{
                    $(this).siblings(".msg").empty();
                } ///// else ///////////////
                
                
            } ////// else if ////////////////////////////////
        
        
        
            ////////////////////////////////////////////////////
            //// 빈값 통과시 ////////////////////////////////////
            else {
                $(this).siblings(".msg").empty();
                // empty() 메서드는 문자열 지우기
            } ///// else ///////////////////////////////////////
            ////////////////////////////////////////////////////




        }); /////////// blur ///////////////////////////////////
    ///////////////////////////////////////////////////////









}); //////// jQB ////////////////////////////
////////////////////////////////////////////
////////////////////////////////////////////


/*//////////////////////////////////////////////
    함수명: groSpace(get rid of space)
    기능: 문자의 모든 공백을 제거하여 리턴함
*/ //////////////////////////////////////////////
function groSpace(val) { // val - 전달변수(처리할문자값)
    var newval = val.replace(/\s/g, "");
    // replace(바꾸고싶은값,바꿀값)
    // 바꾸고 싶은값을 정규식으로 써줘야 모두 찾아서 바꾼다!
    // 슬래쉬 사이에 값을 쓰고 g 플래그를 사용하여 모두 찾아준다!
    // 스페이스는 정규식에서 \s 로 표시한다
    //      /\s/g  -> 스페이스를 모두 찾아라!

    // 변경된 값을 리턴한다!
    return newval; // 호출한 곳으로 변경된값을 가지고 돌아간다!

} ////// groSpace //////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////


/*////////////////////////////////////////
    함수명:validReg
    기능: 값에 맞는 형식을 검사하여 리턴함
    (주의: 정규식을 따옴표로 싸지말자!-싸면 문자가됨)
*/ ////////////////////////////////////////
function validReg(val, cid) {
    // val - 검사할 값, cid - 처리구분아이디
    //console.log(val+"/"+cid);

    // 정규식 변수
    var reg;

    switch (cid) {
        case "mid": //아이디
            reg = /^[a-z0-9]{6,10}$/g;
            //아이디는 6~10자 영문자 또는 숫자
            break;
        case "mpw": //비밀번호
            reg = /^.*(?=^.{5,15}$)(?=.*\d)(?=.*[a-zA-Z])(?=.*[!@#$%^&+=\*]).*$/;
            //특수문자,문자,숫자 포함 형태의 5~15자리 이내의 암호 정규식
            // 특수문자중 \* (역슬래쉬별)은 특수문자처리임
            // *은 모든이라는 뜻으로사용되기때문!
            break;
        case "eml": //이메일
            reg = /^([\w-]+(?:\.[\w-]+)*)@((?:[\w-]+\.)*\w[\w-]{0,66})\.([a-z]{2,6}(?:\.[a-z]{2})?)$/;
            break;

    } ///// switch case문 ///////

    //console.log("정규식:"+reg);
    // 검사결과 리턴
    // test(값) 값을 검사하여 
    // true/false 리턴하는 JS내장함수
    return reg.test(val);

} ///////////// validReg 함수 //////////////
//////////////////////////////////////////
//////////////////////////////////////////
